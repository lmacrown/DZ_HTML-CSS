웹 애플리케이션 : 정적 웹 프로그래밍 방식의 단점을 보완하여 서비스를 제공하는 서버 프로그램
웹 컨테이너 : 웹 서버의 컴포넌트 중 하나로 자바 서블릿과 상호작용함
웹 애플리케이션 구성 요소
- WEB-INF : 웹 애플리케이션에 관한 정보가 저장되는 곳. 외부에서 접근 불가
- classes : 웹 애플리케이션이 수행하는 서블릿과 다른 일반 클래스들이 위치하는 곳
- lib : 웹 애플리케이션에서 사용되는 여러 가지 라이브러리 압추파일이 저장되는 곳. 
DB 연동 드라이버나 프레임워크 기능 관련 jar 파일이 저장
- web.xml : 배치 지시자로서 일종의 환경 설정 파일
웹 애플리케이션에 추가된 구성 요소의 기능
- jsp/html : JSP 파일과 HTML파일이 저장된 곳
- css : 스타일시트 파일이 저장된 곳
- image : 웹 애플리케이션에서 사용되는 이미지가 저장된 곳
- js : 자바스크립트 파일이 저장된 곳
- bin : 애플리케이션에서 사용되는 각종 실행 파일이 저장되는 곳
- conf : 프레임워크에서 사용하는 각종 설정 파일이 저장된 곳
- src : 자바 소스 파일 저장된 곳
port : 속성, 프로퍼티.키 값으로 구성
docbase : 문서가 저장된 경로
컨텍스트 : sever.xml에 등록하는 웹 애플리케이션
컨텍스트 주요 특징
- 웹 애플리케이션당 하나의 컨텍스트가 등록
- 컨텍스트 이름은 중복 안됨
- 대소문자를 구분
- server.xml에 등록
컨텍스트 구성 요소의 기능
- path : 웹 애플리케이션의 컨텍스트 이름. 웹 부라우저에서 실제 웹 애플리케이션을 요청하는 이름
- docBase : 컨택스트에 대한 실제 웹 애플리케이션이 위치한 경로. WEB-INF 상위 폴더까지의 경로를 나타냄
- reloadable : 실행 중 소스 코드가 수정될 경우 바로 갱신할지를 설정. false로 설정하면 재실행시 추가한 소스 코드의 기능 반영
5장
서블릿 : 서버 쪽에서 실행되면서 클라이언트의 요청에 따라 동적으로 서비스를 제공하는 자바 클래스
객체가 생성되고 호출되는 과정이 미리 정의되어 있음
동작과정 : 사진 첨부
서블릿 특징
- 서버 쪽에서 실행되면서 기능을 수행
- 기존의 정적인 웹 프로그램의 문제점을 보완하여 동적인 여러 가지 기능을 제공
- 스레드 방식으로 실행
- 자바로 만들어져 자바의 특징을 가짐
- 컨테이너에서 실행
- 컨테이너 종류에 상관없이 실행
- 보안 기능을 적용하기 쉬움
- 웹 브라우저에서 요청 시 기능 수행

newinstance() : 자바 동적 객체 생성
serializable : 객체의 상태를 파일에 저장했다가 저장한 파일을 그대로 복구할 수 있는 기능
객체 안에 객체(그래프 상태)가 있는 것을 그대로 저장했다가 상태 그대로 복구할 수 있음
append, println, write : 출력

ServletConfig : 서블릿에 구성 정보(전체)
GenericServlet : servlet 인터페이스의 메서드를 미리 구현해 놓은 추상클래스
HttpServlet  : doGet()이나 doPost()를 구현

init : 설정된 정보를 재정의
doGet, doPost : 작업 수행
destroy : 서블릿의 마무리 작업 수행
servlet-mapping : 클래스 이름을 다른 것으로 교체하여 보안성을 높임

전역변수 : 모두 사용
멤버 변수 : 클래스별로 사용
지역변수 : 블록내에서 사용
6장
서블릿 기본기능
- 클라이언트로부터 요청을 받음
- 데이터베이스 연동과 같은 비즈니스 로직 처리
- 처리된 결과를 클라이언트에 돌려줌
세션 : Server에 데이터를 저장하여 브라우저가 닫히거나 서버에서 삭제시 사라짐
쿠키 : 웹 사이트의 방문기록을 남겨 사용자와 웹 사이트 사이를 매개해 주는 정보로 Client에 텍스트 파일로 저장
헤더 : 세션을 저장
URI : 로케이터, 이름 또는 둘다 추가로 분류될 수 있다.
URL : 리소스가 있는 위치를 지정
URN : 리소스에 이름을 부여(거의 안씀)
