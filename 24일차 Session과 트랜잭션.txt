service : DAO가 DB에서 받아온 데이터를 전달받아 가공
factory : map, session 정보를 다 가지고있음
sqlSession : 논리적인 연결 상태
ref : 참조하는 객체 설정
bean : 데이터를 표현하는 것을 목적으로 하는 자바 클래스
SqlSessionFactoryBean : 매퍼 파일인 member.xml과 빈 생성 설정 파일인 modelConfig.xml을 읽어들임
typeAllias : 객체 별명지어줌!
datasource : DB에 연결 정보를 저장
sqlSessionFactory : datasource를 받아오고 mapper에 저장한 xml 설정파일들을 읽어옴
sqlSession에 sqlSessionFactory저장 후 DB가 필요한 클래스에 전달 

action-servlet : DB 연결 및 클래스에 DB 주입
web.xml : url-pattern에 따라 주소에 들어온 값 훜으로 잡아옴
jsp : ui화면
UserController->UserControllerImpl->UserService>UserServiceImpl
->UserDAO->UserDAOImpl->Member.xml->UserController에서 값 반환

contextLoaderListener : 서블릿을 초기화하고 xml설정파일을 읽어들임
AOP : 공통의 관심사를 적용해 발생하는 의존관계 복잡성과 코드 중복을 해소해 주는 프로그래밍
트랜잭션 : 데이터베이스의 상태를 변화시키는 작업의 단위
1) 원자성 : 데이터베이스에 모두 반영되거나 전혀 반영되지 않음
2) 일관성 : 트랜잭션의 작업 처리 결과가 항상 일관성이 있어야함
3) 독립성 : 다른 트랜잭션의 연산에 끼어들수 없음
4) 지속성 : 트랜잭션이 성공적으로 완료되었을 떄 영구적으로 반영
트랜잭션 속성들
- propagation : 트랜잭션 전파 규칙 설정
- isolation : 트랜잭션 격리 레벨 설정
- realOnly : 읽기 전용 여부 설정
- rollbackFor : 트랜잭션을 롤백할 예외 타입 설정
- norollbackFor : 트랜잭션을 롤백하지 않을 예외 타입 설정
- timeout : 트랜잭션 타임아웃 시간 설정

트랜잭션 적용 : xml, 어노테이션
<tx:annotation-driven> : 애노테이션 사용을 위해 트랜잭션을 적용할 빈 설정
Transactional(propagation=Propagation.REQUIRED) : 트랜잭션의 속성을 이용하여 해당 클래스를 실행시킴(원자성)
